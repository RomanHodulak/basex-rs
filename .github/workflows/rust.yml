name: Build

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
      - name: ⚡ Cache
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup/toolchains
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}

      - name: 📦 Install nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          components: llvm-tools-preview
      - name: 🔨 Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all-targets
        env:
          RUSTFLAGS: "-Zinstrument-coverage"

  build-mdv:
    name: 🔨 Build with minimal dependency versions
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
      - name: ⚡ Cache
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup/toolchains
            target
          key: ${{ runner.os }}-mdv-${{ hashFiles('**/Cargo.toml') }}

      - name: 📦 Install nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
      - name: 🔨 Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all-targets -Z minimal-versions
        env:
          RUSTFLAGS: "-Zinstrument-coverage"

  build-msrv:
    name: 🔨 Build with minimum supported Rust version
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
      - name: ⌛ Set toolchain version
        id: date
        run: echo "::set-output name=date::$(date --date '-6 month' +%Y-%m-%d)"
      - name: ⚡ Cache
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup/toolchains
            target
          key: ${{ runner.os }}-msrv-${{ steps.date.outputs.date }}-${{ hashFiles('**/Cargo.toml') }}

      - name: 📦 Install nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-${{ steps.date.outputs.date }}
          default: true
      - name: 🔨 Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all-targets
        env:
          RUSTFLAGS: "-Zinstrument-coverage"

  rustfmt:
    name: 🔍 Analyse using rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
      - name: 📦 Install nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          components: rustfmt
      - name: 🔍 Analyse code with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --verbose --check

  clippy:
    name: 🔍 Analyse using clippy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
      - name: ⚡ Cache
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup/toolchains
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}

      - name: 📦 Install nightly Rust with clippy
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            default: true
            components: clippy
      - name: 🔍 Analyse code with clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  test:
    name: 🏁 Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
      - name: ⚡ Cache
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.rustup/toolchains
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}

      - name: 🐋 Set up database
        run: docker-compose up -d && sudo chown -R 1984:1984 docker
      - name: 📦 Install grcov
        run: curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
      - name: 📦 Install nightly Rust and LLVM tools component
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          components: llvm-tools-preview
      - name: 🚀 Run tests with LLVM InstrProf-based code coverage output
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          LLVM_PROFILE_FILE: "your_name-%p-%m.profraw"
          RUSTFLAGS: "-Zinstrument-coverage"
      - name: 🚀 Run grcov to generate lcov coverage report
        run: ./grcov . -s ./src --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing -o lcov.info --ignore tests.rs --ignore '*/.cargo/*' --ignore '*/examples/*' --excl-line '^\s*\}\s*$'
      - name: 🌍 Upload coverage report
        run: bash <(curl -s https://codecov.io/bash)
